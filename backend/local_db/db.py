import os
from datetime import datetime
from uuid import uuid4
from dotenv import load_dotenv
from sqlalchemy import (
    Column, String, Integer, Numeric, Text, ForeignKey,
    JSON, func, text, create_engine, TIMESTAMP
)
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import declarative_base, relationship, sessionmaker

load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://scouter:scouterpw@localhost:5432/pricescouter")

engine = create_engine(DATABASE_URL, future=True)
SessionLocal = sessionmaker(bind=engine, expire_on_commit=False, future=True)
Base = declarative_base()

class Vendor(Base):
    __tablename__ = "vendors"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    name = Column(Text, unique=True, nullable=False)
    site_url = Column(Text)

class Product(Base):
    __tablename__ = "products"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    gtin = Column(Text, unique=True)
    asin = Column(Text, unique=True)
    title = Column(Text, nullable=False)
    brand = Column(Text)
    category = Column(Text)

class Offer(Base):
    __tablename__ = "offers"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    product_id = Column(UUID(as_uuid=True), ForeignKey("products.id", ondelete="CASCADE"))
    vendor_id  = Column(UUID(as_uuid=True), ForeignKey("vendors.id", ondelete="CASCADE"))
    price_cents = Column(Integer)
    currency = Column(Text, nullable=False, server_default=text("'USD'"))
    shipping_cents = Column(Integer)
    total_cents = Column(Integer)  # generated by DB; can leave None on insert
    rating = Column(Numeric(3,1))
    url = Column(Text)
    source = Column(Text, nullable=False)
    raw_payload = Column(JSON)
    scraped_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=func.now())

class Search(Base):
    __tablename__ = "searches"
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid4)
    query = Column(Text, nullable=False)
    provider = Column(Text, nullable=False)
    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=func.now())

class SearchResult(Base):
    __tablename__ = "search_results"
    search_id = Column(UUID(as_uuid=True), ForeignKey("searches.id", ondelete="CASCADE"), primary_key=True)
    offer_id  = Column(UUID(as_uuid=True), ForeignKey("offers.id", ondelete="CASCADE"), primary_key=True)
    rank      = Column(Integer)
